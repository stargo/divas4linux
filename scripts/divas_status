#!/usr/bin/perl -w

use Text::Table;

my $divactrl = "/usr/lib/divas/divactrl";

sub mantool($) {
	my ($param) = @_;

	qx{${divactrl} mantool -b ${param}};
}

sub getval($$) {
	my ($info, $key) = @_;

	return "N/A" if ($key !~ m/^(.*)\\([^\\]*)$/);
	my $path = $1;
	my $k = $2;

	my $insection = 0;
	foreach my $line (split(/\n/, $info)) {
		if ($insection) {
			last if ($line =~ m/^$/);
			if ($line =~ m/-\[\Q${k}\E \.*\] = (.*)\w*$/i) {
				(my $trimmed=$1)=~ s/\s+$//;
				return $trimmed;
			}
		} elsif (($line =~ m/Recursive read: \[\Q${path}\E\]/i) || ($line =~ m/dir-\[\Q${path}\E\]/i)) {
			$insection = 1;
		}
	}

	"N/A";
}

my $cards = mantool("-L");

die "no cards found: $!" if ($cards !~ m/{(.*)}/);

my $controllertable = Text::Table->new({ title=>'Ctl', align=>"right", align_title=>"right"},
	\' | ',{ title=>'Serial', align=>"right", align_title=>"left"},
	\' | ',{ title=>'Chan', align=>"right", align_title=>"left"},
	\' | ',{ title=>'Protocol Build', align=>"left"},
	\' | ',{ title=>'DSP Code Build', align=>"left"},
	\' | ',{ title=>'Temp', align=>"right", align_title=>"left"},
	);
my $channeltable = Text::Table->new({ title=>'Ctl/Ch', align=>"right", align_title=>"right"},
	\' | ',{ title=>'L1', align=>"left"},
	\' | ',{ title=>'L2', align=>"left"},
	\' | ',{ title=>'Line', align=>"left"},
	\' | ',{ title=>'Type', align=>"left"},
	\' | ',{ title=>'Framing', align=>"left"},
	\' | ',{ title=>'Layer 2', align=>"left"},
	\' | ',{ title=>'Layer 3', align=>"left"},
	\' | ',{ title=>'Remote', align=>"left"},
	\' | ',{ title=>'Local', align=>"left"});
foreach my $card (split(/,/, $1)) {
	next if ($card >= 1000);

	my $info = mantool("-c ${card} -Recursive -r'Info'");
	my $state = mantool("-c ${card} -Recursive -r'State'");

	$controllertable->add($card,
		getval($info, "Info\\SerialNumber"),
		getval($info, "Info\\Channels"),
		getval($info, "Info\\ProtocolBuild"),
		getval($info, "Info\\DSPCodeBuild"),
		getval($info, "Info\\Temperature")."Â°C",
		);

	for (my $c=1; $c <= getval($info, "Info\\Channels"); $c++) {

		my $tx = getval($state, "State\\B${c}\\Modem\\TX Speed");
		my $rx = getval($state, "State\\B${c}\\Modem\\RX Speed");
		my $speed = "";
		$speed = " ${tx}/${rx}" if (getval($state, "State\\B${c}\\Framing") =~ m/Modem/i);
		$channeltable->add(sprintf("%d/%02d",$card, $c),
			getval($state, "State\\Layer1"),
			getval($state, "State\\Layer2 No1"),
			getval($state, "State\\B${c}\\Line"),
			getval($state, "State\\B${c}\\Line Type"),
			getval($state, "State\\B${c}\\Framing")."${speed}",
			getval($state, "State\\B${c}\\Layer2"),
			getval($state, "State\\B${c}\\Layer3"),
			getval($state, "State\\B${c}\\Remote Address").getval($state, "State\\B${c}\\Remote SubAddr"),
			getval($state, "State\\B${c}\\Local Address").getval($state, "State\\B${c}\\Local SubAddr"),
			);
	}
}

print "Controllers:\n".$controllertable->title, $controllertable->rule('-','+'), $controllertable->body."\n";
print "Channels:\n".$channeltable->title, $channeltable->rule('-','+'), $channeltable->body;
